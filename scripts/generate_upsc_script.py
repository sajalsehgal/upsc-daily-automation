"""
Generate UPSC current affairs script in Hindi using Google Gemini REST API
"""
import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class UPSCScriptGenerator:
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise Exception("GEMINI_API_KEY not found in environment")
        
        # Use v1 API with gemini-2.5-flash (latest free model)
        self.api_url = f"https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key={self.api_key}"
    
    def load_news(self, news_file):
        """Load scraped news"""
        with open(news_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    
    def generate_hindi_script(self, news_data):
        """Generate Hindi script for UPSC current affairs video"""
        
        articles = news_data['articles']
        date_hindi = news_data.get('date_hindi', datetime.now().strftime('%d %B %Y'))
        
        # Prepare news summary with more details
        news_summary = "\n\n".join([
            f"{i+1}. Title: {article['title']}\n   Summary: {article.get('summary', 'No summary')}\n   Source: {article.get('source', 'Unknown')}"
            for i, article in enumerate(articles[:30])
        ])
        
        prompt = f"""‡§Ü‡§™ ‡§è‡§ï UPSC Current Affairs educator ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§ú ‡§ï‡•Ä Top 10 news items ‡§ï‡•ã Hindi ‡§Æ‡•á‡§Ç ‡§è‡§ï YouTube video script ‡§¨‡§®‡§æ‡§®‡•Ä ‡§π‡•à‡•§

‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ: {date_hindi}

Available News Articles ({len(articles)} articles from multiple sources):
{news_summary}

INSTRUCTIONS:
1. ‡§ä‡§™‡§∞ ‡§¶‡§ø‡§è ‡§ó‡§è articles ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§∏‡§¨‡§∏‡•á ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ 10 news items select ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã UPSC ‡§ï‡•á ‡§≤‡§ø‡§è relevant ‡§π‡•ã‡§Ç
2. Priority ‡§¶‡•á‡§Ç:
   - Government policies & schemes (‡§®‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç, ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç)
   - International relations (‡§µ‡§ø‡§¶‡•á‡§∂ ‡§®‡•Ä‡§§‡§ø, ‡§∏‡§Ç‡§ß‡§ø‡§Ø‡§æ‡§Å)
   - Economy & budget (‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§®‡•Ä‡§§‡§ø, ‡§¨‡§ú‡§ü)
   - Environment & climate (‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£, ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®)
   - Science & technology (‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®, ‡§§‡§ï‡§®‡•Ä‡§ï)
   - Social issues (‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•á)
   - Important appointments (‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç)
   - Supreme Court judgments (‡§∏‡•Å‡§™‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§´‡•à‡§∏‡§≤‡•á)
   - Awards & recognition (‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞, ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§®)

3. ‡§π‡§∞ news item ‡§ï‡•á ‡§≤‡§ø‡§è (3-4 sentences):
   - ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•Å‡§Ü? (What happened - be specific with facts, dates, names)
   - ‡§ï‡•ç‡§Ø‡•ã‡§Ç important ‡§π‡•à? (Why important for UPSC)
   - UPSC ‡§Æ‡•á‡§Ç ‡§ï‡§π‡§æ‡§Å ‡§™‡•Ç‡§õ‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à? (Prelims/Mains/Essay - specific paper/topic)
   - Key facts/dates/names/numbers highlight ‡§ï‡§∞‡•á‡§Ç

4. SCRIPT FORMAT:

[INTRO - 30 seconds]
‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç! ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§π‡•à {date_hindi}‡•§ 
‡§Ü‡§ú ‡§π‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç‡§ó‡•á Top 10 Current Affairs ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä UPSC ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡§Ç‡•§
‡§§‡•ã ‡§ö‡§≤‡§ø‡§è ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

[NEWS ITEM 1 - 60-90 seconds]
‡§™‡§π‡§≤‡•Ä ‡§ñ‡§¨‡§∞: [Title in simple, clear Hindi]
[Detailed explanation in 3-4 sentences with specific facts]
UPSC Relevance: [Detailed - which paper, which topic, example question type]

[NEWS ITEM 2 - 60-90 seconds]
‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§ñ‡§¨‡§∞: [Title]
[Explanation]
UPSC Relevance: [...]

... [Continue for all 10 items - each 60-90 seconds]

[OUTRO - 30 seconds]
‡§§‡•ã ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç, ‡§Ø‡§π ‡§•‡•á ‡§Ü‡§ú ‡§ï‡•á Top 10 Current Affairs‡•§ 
PDF notes ‡§î‡§∞ detailed analysis ‡§ï‡•á ‡§≤‡§ø‡§è description ‡§Æ‡•á‡§Ç link ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§
‡§Ö‡§ó‡§∞ video helpful ‡§≤‡§ó‡§æ ‡§§‡•ã like ‡§ï‡§∞‡•á‡§Ç, share ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ channel ‡§ï‡•ã subscribe ‡§ï‡§∞‡§®‡§æ ‡§Æ‡§§ ‡§≠‡•Ç‡§≤‡§ø‡§è‡•§
Bell icon ‡§≠‡•Ä press ‡§ï‡§∞ ‡§¶‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§∞‡•ã‡§ú‡§º ‡§∏‡•Å‡§¨‡§π 7 ‡§¨‡§ú‡•á notification ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡•§
‡§ï‡§≤ ‡§´‡§ø‡§∞ ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á ‡§®‡§à ‡§ñ‡§¨‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§•‡•§ ‡§§‡§¨ ‡§§‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§™‡§¢‡§º‡§§‡•á ‡§∞‡§π‡§ø‡§è‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!

5. LANGUAGE GUIDELINES:
   - Simple, conversational Hindi (not overly formal)
   - Devanagari script only
   - Use English terms when commonly used (GDP, NASA, WHO, etc.)
   - Avoid complex Sanskrit/Urdu words
   - Make it engaging like you're talking to a friend
   - Include specific numbers, dates, names whenever available
   - Total script should be 10-12 minutes (about 1400-1600 words)

6. QUALITY REQUIREMENTS:
   - Each news item must have concrete facts (dates, numbers, names)
   - Avoid vague statements
   - Connect each news to specific UPSC syllabus topics
   - Make it actionable for students

Generate the complete detailed script now:"""

        print("\nü§ñ Generating Hindi script with Gemini 2.5 Flash...")
        print("   This will take 30-60 seconds...")
        
        # Make API request
        payload = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 8192
            }
        }
        
        response = requests.post(self.api_url, json=payload, timeout=120)
        
        if response.status_code != 200:
            raise Exception(f"Gemini API error: {response.status_code} - {response.text}")
        
        result = response.json()
        script = result['candidates'][0]['content']['parts'][0]['text']
        
        print("‚úÖ Script generated!")
        print(f"   Length: {len(script)} characters")
        
        return script
    
    def save_script(self, script, output_path):
        """Save generated script"""
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(script)
        
        print(f"üíæ Script saved: {output_path}")
        return script

def main():
    # Load today's news
    date_str = datetime.now().strftime('%Y-%m-%d')
    news_file = f'output/upsc/news/daily_news_{date_str}.json'
    
    if not os.path.exists(news_file):
        print(f"‚ùå News file not found: {news_file}")
        print("   Run scrape_news.py first!")
        return
    
    # Generate script
    generator = UPSCScriptGenerator()
    news_data = generator.load_news(news_file)
    
    print(f"\nüì∞ Loaded {news_data['total_articles']} articles")
    print(f"   Date: {news_data['date_hindi']}")
    print(f"   Sources: {news_data.get('sources_count', 'N/A')}")
    
    script = generator.generate_hindi_script(news_data)
    
    # Save script
    output_path = f'output/upsc/scripts/script_{date_str}.txt'
    generator.save_script(script, output_path)
    
    print(f"\nüìù Script preview (first 500 chars):")
    print("-" * 70)
    print(script[:500] + "...")
    print("-" * 70)
    
    print(f"\nüéâ Script generation complete!")

if __name__ == "__main__":
    main()
