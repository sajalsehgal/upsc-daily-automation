"""
Generate UPSC script - DETAILED Hindi explanations
"""
import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv
import time

load_dotenv()

class UPSCScriptGenerator:
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise Exception("GEMINI_API_KEY not found")
        
        self.api_url = f"https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key={self.api_key}"
    
    def load_news(self, news_file):
        with open(news_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def generate_single_news_item(self, news_article, item_number):
        """Generate ONE detailed news explanation"""
        
        news_numbers_hindi = ["‡§™‡§π‡§≤‡•Ä", "‡§¶‡•Ç‡§∏‡§∞‡•Ä", "‡§§‡•Ä‡§∏‡§∞‡•Ä", "‡§ö‡•å‡§•‡•Ä", "‡§™‡§æ‡§Ç‡§ö‡§µ‡•Ä‡§Ç", 
                             "‡§õ‡§†‡•Ä", "‡§∏‡§æ‡§§‡§µ‡•Ä‡§Ç", "‡§Ü‡§†‡§µ‡•Ä‡§Ç", "‡§®‡•å‡§µ‡•Ä‡§Ç", "‡§¶‡§∏‡§µ‡•Ä‡§Ç"]
        
        title = news_article.get('title', '')
        summary = news_article.get('summary', '')[:800]  # Use more of summary
        
        prompt = f"""You are a UPSC educator. Explain this news in DETAILED Hindi (NOT just headline).

News: {title}
Details: {summary}

Write EXACTLY 120-150 words in this format:

{news_numbers_hindi[item_number-1]} ‡§ñ‡§¨‡§∞‡•§
[Write a DETAILED explanation in 6-7 complete Hindi sentences covering:
- What exactly happened (specific details)
- Who was involved (names, positions)
- Where did it happen (locations)
- When did it happen (dates if available)
- Why is it important for India/world
- What are the implications
- Key facts students should remember]
UPSC ‡§Æ‡•á‡§Ç ‡§Ø‡§π General Studies Paper 1, 2, ‡§Ø‡§æ 3 ‡§Æ‡•á‡§Ç [specific topic like ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß, ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§Ö‡§∞‡•ç‡§•‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ, ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£, ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä, ‡§∂‡§æ‡§∏‡§®] ‡§∏‡•á ‡§™‡•Ç‡§õ‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

CRITICAL RULES:
- Write in SIMPLE CONVERSATIONAL HINDI (like talking to a friend)
- Do NOT just translate the English headline
- EXPLAIN the news in detail
- Use Hindi for everything except proper nouns (WHO, NASA, GDP, names)
- Must be 120-150 words
- Write as if you're a teacher explaining to students

Write the detailed explanation now:"""

        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.8,
                "maxOutputTokens": 800
            }
        }
        
        try:
            response = requests.post(self.api_url, json=payload, timeout=90)
            
            if response.status_code != 200:
                print(f" ‚ùå API Error")
                return self.create_fallback_item(news_article, item_number)
            
            result = response.json()
            
            if 'candidates' not in result or not result['candidates']:
                print(f" ‚ùå No response")
                return self.create_fallback_item(news_article, item_number)
            
            candidate = result['candidates'][0]
            
            if 'content' not in candidate or 'parts' not in candidate['content']:
                print(f" ‚ùå Invalid format")
                return self.create_fallback_item(news_article, item_number)
            
            text = candidate['content']['parts'][0]['text'].strip()
            
            # Verify it's actually in Hindi and detailed
            word_count = len(text.split())
            if word_count < 80:
                print(f" ‚ö†Ô∏è  Too short ({word_count} words), retrying...")
                time.sleep(2)
                # Retry once
                response = requests.post(self.api_url, json=payload, timeout=90)
                if response.status_code == 200:
                    result = response.json()
                    if 'candidates' in result and result['candidates']:
                        text = result['candidates'][0]['content']['parts'][0]['text'].strip()
            
            return text
            
        except Exception as e:
            print(f" ‚ùå Exception: {e}")
            return self.create_fallback_item(news_article, item_number)
    
    def create_fallback_item(self, news_article, item_number):
        """Create a basic fallback if API fails"""
        news_numbers_hindi = ["‡§™‡§π‡§≤‡•Ä", "‡§¶‡•Ç‡§∏‡§∞‡•Ä", "‡§§‡•Ä‡§∏‡§∞‡•Ä", "‡§ö‡•å‡§•‡•Ä", "‡§™‡§æ‡§Ç‡§ö‡§µ‡•Ä‡§Ç", 
                             "‡§õ‡§†‡•Ä", "‡§∏‡§æ‡§§‡§µ‡•Ä‡§Ç", "‡§Ü‡§†‡§µ‡•Ä‡§Ç", "‡§®‡•å‡§µ‡•Ä‡§Ç", "‡§¶‡§∏‡§µ‡•Ä‡§Ç"]
        
        return f"""{news_numbers_hindi[item_number-1]} ‡§ñ‡§¨‡§∞‡•§
{news_article.get('title', '‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞')} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§ú ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§ñ‡§¨‡§∞ ‡§≠‡§æ‡§∞‡§§ ‡§î‡§∞ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡•Ä‡•§
UPSC ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§∏‡•á ‡§™‡•Ç‡§õ‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§"""
    
    def generate_hindi_script(self, news_data):
        """Generate complete detailed script"""
        
        articles = news_data['articles']
        date_hindi = news_data.get('date_hindi', datetime.now().strftime('%d %B %Y'))
        
        print("\nü§ñ Generating DETAILED Hindi script...")
        print("   Creating comprehensive explanations...\n")
        
        # Intro
        intro = f"""‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç! ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§π‡•à {date_hindi}‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç‡§ó‡•á Top 10 Current Affairs ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä UPSC ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§π‡§∞ ‡§ñ‡§¨‡§∞ ‡§ï‡•ã ‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§ä‡§Ç‡§ó‡§æ‡•§ ‡§§‡•ã ‡§ö‡§≤‡§ø‡§è ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

"""
        
        # Generate 10 detailed news items
        news_items = []
        for i in range(10):
            print(f"   News {i+1}/10...", end='')
            
            if i < len(articles):
                item = self.generate_single_news_item(articles[i], i+1)
                news_items.append(item)
                print(" ‚úì")
            else:
                print(" ‚ö†Ô∏è  No article")
                break
            
            # Delay between requests
            if i < 9:
                time.sleep(3)  # Longer delay to avoid rate limits
        
        # Outro
        outro = """

‡§§‡•ã ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç, ‡§Ø‡§π ‡§•‡•á ‡§Ü‡§ú ‡§ï‡•á Top 10 Current Affairs ‡§ú‡•ã ‡§Æ‡•à‡§Ç‡§®‡•á ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§è‡•§ PDF notes ‡§ï‡•á ‡§≤‡§ø‡§è description ‡§Æ‡•á‡§Ç link ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§ ‡§Ö‡§ó‡§∞ video helpful ‡§≤‡§ó‡§æ ‡§§‡•ã like ‡§ï‡§∞‡•á‡§Ç, share ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ channel ‡§ï‡•ã subscribe ‡§ï‡§∞‡§®‡§æ ‡§Æ‡§§ ‡§≠‡•Ç‡§≤‡§ø‡§è‡•§ Bell icon ‡§≠‡•Ä press ‡§ï‡§∞ ‡§¶‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§∞‡•ã‡§ú‡§º notification ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡•§ ‡§ï‡§≤ ‡§´‡§ø‡§∞ ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á ‡§®‡§à ‡§ñ‡§¨‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§•‡•§ ‡§§‡§¨ ‡§§‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§™‡§¢‡§º‡§§‡•á ‡§∞‡§π‡§ø‡§è‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!"""
        
        # Combine
        script = intro + "\n\n".join(news_items) + outro
        
        word_count = len(script.split())
        
        print(f"\n‚úÖ Detailed script generated!")
        print(f"   News items: {len(news_items)}")
        print(f"   Total words: {word_count}")
        print(f"   Est. duration: {word_count / 130:.1f} minutes")
        
        if word_count < 1500:
            print(f"   ‚ö†Ô∏è  Warning: Script might be too short!")
        
        return script
    
    def save_script(self, script, output_path):
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(script)
        print(f"üíæ Saved: {output_path}")
        return script

def main():
    date_str = datetime.now().strftime('%Y-%m-%d')
    news_file = f'output/upsc/news/daily_news_{date_str}.json'
    
    if not os.path.exists(news_file):
        print(f"‚ùå News file not found")
        return
    
    generator = UPSCScriptGenerator()
    news_data = generator.load_news(news_file)
    
    print(f"\nüì∞ Loaded {news_data['total_articles']} articles")
    
    script = generator.generate_hindi_script(news_data)
    
    output_path = f'output/upsc/scripts/script_{date_str}.txt'
    generator.save_script(script, output_path)
    
    print(f"\nüìù Preview:")
    print("-" * 70)
    print(script[:700])
    print("-" * 70)

if __name__ == "__main__":
    main()
